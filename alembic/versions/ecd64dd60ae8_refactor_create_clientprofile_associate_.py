"""Refactor: Create ClientProfile, associate via UserClientAccess, adjust User model

Revision ID: ecd64dd60ae8
Revises: 29f6b6071791
Create Date: 2025-06-08 18:05:23.984428

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ecd64dd60ae8'
down_revision: Union[str, None] = '29f6b6071791'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('client_profiles',
    sa.Column('ruc', sa.String(length=11), nullable=False),
    sa.Column('business_name', sa.String(length=255), nullable=False),
    sa.Column('client_type', sa.Enum('NATURAL', 'JURIDICA', name='clienttype'), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_client_profiles_business_name'), 'client_profiles', ['business_name'], unique=False)
    op.create_index(op.f('ix_client_profiles_id'), 'client_profiles', ['id'], unique=False)
    op.create_index(op.f('ix_client_profiles_ruc'), 'client_profiles', ['ruc'], unique=True)
    op.create_table('user_client_access',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('client_profile_id', sa.Integer(), nullable=False),
    sa.Column('relationship_type', sa.Enum('TITULAR', 'REPRESENTANTE_LEGAL', 'CONTADOR', 'ASISTENTE', name='relationshiptype'), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['client_profile_id'], ['client_profiles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'client_profile_id', 'id')
    )
    op.create_index(op.f('ix_user_client_access_id'), 'user_client_access', ['id'], unique=False)
    op.add_column('sunat_credentials', sa.Column('owner_client_profile_id', sa.Integer(), nullable=False))
    op.alter_column('sunat_credentials', 'sol_username',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.drop_index(op.f('ix_sunat_credentials_owner_user_id'), table_name='sunat_credentials')
    op.create_index(op.f('ix_sunat_credentials_owner_client_profile_id'), 'sunat_credentials', ['owner_client_profile_id'], unique=False)
    op.drop_constraint(op.f('sunat_credentials_owner_user_id_fkey'), 'sunat_credentials', type_='foreignkey')
    op.create_foreign_key(None, 'sunat_credentials', 'client_profiles', ['owner_client_profile_id'], ['id'], ondelete='CASCADE')
    op.drop_column('sunat_credentials', 'status')
    op.drop_column('sunat_credentials', 'validation_failure_reason')
    op.drop_column('sunat_credentials', 'owner_user_id')
    op.drop_column('sunat_credentials', 'last_validated_at')
    op.drop_index(op.f('ix_users_business_name'), table_name='users')
    op.drop_index(op.f('ix_users_client_ruc'), table_name='users')
    op.drop_column('users', 'client_ruc')
    op.drop_column('users', 'terms_accepted_at')
    op.drop_column('users', 'business_name')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('business_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('terms_accepted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('client_ruc', sa.VARCHAR(length=11), autoincrement=False, nullable=True))
    op.create_index(op.f('ix_users_client_ruc'), 'users', ['client_ruc'], unique=True)
    op.create_index(op.f('ix_users_business_name'), 'users', ['business_name'], unique=False)
    op.add_column('sunat_credentials', sa.Column('last_validated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('sunat_credentials', sa.Column('owner_user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('sunat_credentials', sa.Column('validation_failure_reason', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('sunat_credentials', sa.Column('status', postgresql.ENUM('VALID', 'INVALID_CREDENTIALS', 'USER_BLOCKED', 'NEEDS_CAPTCHA', 'UNKNOWN_ERROR', 'PENDING_VERIFICATION', name='credentialstatus'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'sunat_credentials', type_='foreignkey')
    op.create_foreign_key(op.f('sunat_credentials_owner_user_id_fkey'), 'sunat_credentials', 'users', ['owner_user_id'], ['id'])
    op.drop_index(op.f('ix_sunat_credentials_owner_client_profile_id'), table_name='sunat_credentials')
    op.create_index(op.f('ix_sunat_credentials_owner_user_id'), 'sunat_credentials', ['owner_user_id'], unique=False)
    op.alter_column('sunat_credentials', 'sol_username',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
    op.drop_column('sunat_credentials', 'owner_client_profile_id')
    op.drop_index(op.f('ix_user_client_access_id'), table_name='user_client_access')
    op.drop_table('user_client_access')
    op.drop_index(op.f('ix_client_profiles_ruc'), table_name='client_profiles')
    op.drop_index(op.f('ix_client_profiles_id'), table_name='client_profiles')
    op.drop_index(op.f('ix_client_profiles_business_name'), table_name='client_profiles')
    op.drop_table('client_profiles')
    # ### end Alembic commands ###
